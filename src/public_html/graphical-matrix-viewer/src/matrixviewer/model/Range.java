
package matrixviewer.model;

/**
 * Implements a simple range with upper and lower bounds.
 * @author bchisham
 */
public class Range implements Comparable {
    private int minValue;
    private int maxValue;
    /**
     * Create the range with the specified min and max values.
     * @param minValue
     * @param maxValue
     */
    public Range(int minValue, int maxValue) {
        //swap if given out of order.
        if (maxValue < minValue){ int tmp = minValue; minValue = maxValue; maxValue = minValue; }
        this.minValue = minValue;
        this.maxValue = maxValue;
    }
    /**
     * Get the upper limit of the range
     * @return
     */
    public int getMaxValue() {
        return maxValue;
    }
    /**
     * Set the upper limit of the range
     * @param maxValue
     */
    public void setMaxValue(int maxValue) {
        this.maxValue = maxValue;
    }
    /**
     * Get the lower limit of the range.
     * @return
     */
    public int getMinValue() {
        return minValue;
    }
    /**
     * Set the lower limit of the range
     * @param minValue
     */
    public void setMinValue(int minValue) {
        this.minValue = minValue;
    }
    /**
     * Convert the range to a string.
     * @return
     */
    @Override
    public String toString(){
        return minValue + "-" + maxValue;
    }
    /**
     * Check if the potential element is in this range
     * @return
     */
    public boolean contains( int potn_ele  ){
        return this.getMinValue()<= potn_ele && this.getMaxValue() >= potn_ele;
    }
    /**
     * Compare this range to another.
     * @param o
     * @return
     */
    public int compareTo(Object o) {
        if (o.getClass() == Range.class){
            Range rhs = (Range)o;
            return this.getMinValue() - rhs.getMinValue();
        }
        return -1;
    }
    /**
     * Compare this range to another.
     * @param o
     * @return
     */
    @Override
    public boolean equals(Object o){
        if (o.getClass() == Range.class){
            Range rhs = (Range)o;
            return this.getMinValue() == rhs.getMinValue() && this.getMaxValue() == rhs.getMaxValue();
        }
        return false;
    }
    /** Autogenerated */
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + this.minValue;
        hash = 31 * hash + this.maxValue;
        return hash;
    }

}
