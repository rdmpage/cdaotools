/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Loader.java
 *
 * Created on Dec 13, 2010, 8:51:25 PM
 */

package cdaoexplorer.forms;

import cdaoexplorer.forms.dialogs.AddAnnotation;
import java.net.MalformedURLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import prefuse.demos.CDAOview;

/**
 *
 * @author bchisham
 */
public class Loader extends javax.swing.JFrame {

    public static final int ONTO_LOAD_WEIGHT = 50;
    public static final int WB_LOAD_WEIGHT   = 33;
    public static final int UPDATE_INTERVAL  = 1000;
    private static Workbench wb;
    private static Thread loadWatcher;
    private static Loader instance = null;

    private static class LoaderThread extends Thread {
       private String[] args;
       public LoaderThread( String[] args ){
          this.args = args;
       }

        @Override
        public void run() {
            try {
                Thread.sleep(200);
            } catch (InterruptedException ex) {
                Logger.getLogger(Loader.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
               CDAOview.main(args);
            }
            catch ( Exception ex ){

            }
            while (! Loader.instance.isLoaded() ){
              Loader.instance.updateProgress();
            }
            System.err.println( "Load complete opening workbench" );
            try {
              Workbench.main( new String[0] /*args*/);
            }
            catch (/*Interrupted*/Exception ex) {
              Logger.getLogger(Loader.class.getName()).log(Level.SEVERE, null, ex);
            }
        }



    }

    /** Creates new form Loader */
    public Loader( ) {
        initComponents();
        
        if (null == instance ){
            instance = this;
        }
    }

    private void loaded(){
        this.setVisible(false);
        
    }

    private boolean isLoaded(){
        return true; //this.loadProgress.getMaximum() == this.loadProgress();
    }

    private int loadProgress(){

        int ret = 0;//Workbench.isLoaded() ? WB_LOAD_WEIGHT : 0;

        ret += ONTO_LOAD_WEIGHT * AddAnnotation.getOntologiesLoaded();

        return ret;
    }

    private void updateProgress(  ){
        
        this.loadProgress.setValue( this.loadProgress() );
        //System.err.println("Load Progress: " + this.loadProgress() );
        if ( this.isLoaded() ){
            this.loaded();
        }

    }

    private static void runLoader(String[] args ){
        loadWatcher = new LoaderThread( args );
        loadWatcher.setDaemon(true);
            
        loadWatcher.start();
    }


    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        loadProgress = new javax.swing.JProgressBar();
        jLabel2 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(204, 204, 102));
        setBounds(new java.awt.Rectangle(400, 200, 0, 0));
        setName("loaderFrame"); // NOI18N
        setResizable(false);
        setUndecorated(true);

        jLabel1.setBackground(new java.awt.Color(206, 206, 102));
        jLabel1.setFont(new java.awt.Font("Lucida Handwriting", 0, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(102, 0, 0));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("CDAO Explorer");
        jLabel1.setName("jLabel1"); // NOI18N

        loadProgress.setBackground(new java.awt.Color(206, 206, 102));
        loadProgress.setForeground(new java.awt.Color(102, 0, 0));
        loadProgress.setToolTipText("progress");
        loadProgress.setName("loadProgress"); // NOI18N

        jLabel2.setBackground(new java.awt.Color(206, 206, 102));
        jLabel2.setForeground(new java.awt.Color(102, 0, 0));
        jLabel2.setText("Loading");
        jLabel2.setName("jLabel2"); // NOI18N

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(loadProgress, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 622, Short.MAX_VALUE)
                    .add(jLabel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 622, Short.MAX_VALUE)
                    .add(jLabel2))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 310, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 41, Short.MAX_VALUE)
                .add(jLabel2)
                .add(3, 3, 3)
                .add(loadProgress, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        final String[] params = args;
        try {
            java.awt.EventQueue.invokeLater(new Runnable() {

                public void run() {
                    new Loader().setVisible(false);
                    runLoader( params );
                    
                }
            });

            AddAnnotation.loadAnnotations();
           // wb = new Workbench(args);
           // wb.setVisible(true);
            //Loader.instance.setVisible(false);
        } catch (MalformedURLException ex) {
            Logger.getLogger(Loader.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JProgressBar loadProgress;
    // End of variables declaration//GEN-END:variables

}
